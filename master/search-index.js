var searchIndex = {};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an N-dimensional container similar to numpy’s\nndarray.","items":[[3,"Axis","ndarray","An axis index.",null,null],[3,"Indexes","","An iterator over the indexes of an array shape.",null,null],[3,"Si","","A slice, a description of a range of an array axis.",null,null],[3,"InnerIter","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",null,null],[3,"InnerIterMut","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row (mutable).",null,null],[3,"OuterIter","","An iterator that traverses over the outermost dimension\nand yields each subview.",null,null],[3,"OuterIterMut","","An iterator that traverses over the outermost dimension\nand yields each subview (mutable).",null,null],[3,"AxisChunksIter","","An iterator that traverses over the specified axis\nand yields views of the specified size on this axis.",null,null],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis\nand yields mutable views of the specified size on this axis.",null,null],[3,"ArrayBase","","An *N*-dimensional array.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Elements","","An iterator over the elements of an array.",null,null],[3,"ElementsMut","","An iterator over the elements of an array (mutable).",null,null],[3,"Indexed","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[4,"ShapeError","","An error that can be produced by `.into_shape()`",null,null],[13,"IncompatibleShapes","","incompatible shapes in reshape, (from, to)",0,null],[13,"IncompatibleLayout","","incompatible layout: not contiguous",0,null],[13,"DimensionTooLarge","","Dimension too large (shape)",0,null],[4,"StrideError","","An error to describe invalid stride states",null,null],[13,"OutOfBounds","","stride leads to out of bounds indexing",1,null],[13,"Unsupported","","stride leads to aliasing array elements",1,null],[5,"zeros","","***Deprecated: Use `ArrayBase::zeros` instead.***",null,{"inputs":[{"name":"d"}],"output":{"name":"ownedarray"}}],[5,"arr0","","Return a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"ownedarray"}}],[5,"arr1","","Return a one-dimensional array with elements from `xs`.",null,null],[5,"rcarr1","","Return a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Return a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview"}}],[5,"aview1","","Return a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Return a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Return a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Return a two-dimensional array with elements from `xs`.",null,null],[5,"rcarr2","","Return a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Return a three-dimensional array with elements from `xs`.",null,null],[5,"rcarr3","","Return a three-dimensional array with elements from `xs`.",null,null],[11,"index","","",2,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"elem"}}],[11,"index_mut","","",2,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"elem"}}],[11,"eq","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"hash","","",2,{"inputs":[{"name":"arraybase"},{"name":"h"}],"output":null}],[11,"encode","","",2,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"blas","","Experimental BLAS (Basic Linear Algebra Subprograms) integration",null,null],[3,"BlasArrayView","ndarray::blas","***Requires crate feature `&quot;rblas&quot;`***",null,null],[3,"BlasArrayViewMut","","***Requires crate feature `&quot;rblas&quot;`***",null,null],[8,"AsBlas","","Convert an array into a blas friendly wrapper.",null,null],[10,"blas_checked","","Return an array view implementing Vector (1D) or Matrix (2D)\ntraits.",3,{"inputs":[{"name":"asblas"}],"output":{"name":"result"}}],[11,"blas","","Equivalent to `.blas_checked().unwrap()`",3,{"inputs":[{"name":"asblas"}],"output":{"name":"blasarrayviewmut"}}],[10,"blas_view_checked","","Return a read-only array view implementing Vector (1D) or Matrix (2D)\ntraits.",3,{"inputs":[{"name":"asblas"}],"output":{"name":"result"}}],[11,"bv","","`bv` stands for **b**las **v**iew.",3,{"inputs":[{"name":"asblas"}],"output":{"name":"blasarrayview"}}],[10,"blas_view_mut_checked","","Return a read-write array view implementing Vector (1D) or Matrix (2D)\ntraits.",3,{"inputs":[{"name":"asblas"}],"output":{"name":"result"}}],[11,"bvm","","`bvm` stands for **b**las **v**iew **m**ut.",3,{"inputs":[{"name":"asblas"}],"output":{"name":"blasarrayviewmut"}}],[11,"clone","","",4,{"inputs":[{"name":"blasarrayview"}],"output":{"name":"self"}}],[11,"blas_checked","ndarray","",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"result"}}],[11,"blas_view_checked","","",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"result"}}],[11,"blas_view_mut_checked","","",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"result"}}],[11,"len","ndarray::blas","",4,{"inputs":[{"name":"blasarrayview"}],"output":{"name":"c_int"}}],[11,"as_ptr","","",4,null],[11,"as_mut_ptr","","",4,null],[11,"inc","","",4,{"inputs":[{"name":"blasarrayview"}],"output":{"name":"c_int"}}],[11,"len","","",5,{"inputs":[{"name":"blasarrayviewmut"}],"output":{"name":"c_int"}}],[11,"as_ptr","","",5,null],[11,"as_mut_ptr","","",5,null],[11,"inc","","",5,{"inputs":[{"name":"blasarrayviewmut"}],"output":{"name":"c_int"}}],[11,"rows","","",4,{"inputs":[{"name":"blasarrayview"}],"output":{"name":"c_int"}}],[11,"cols","","",4,{"inputs":[{"name":"blasarrayview"}],"output":{"name":"c_int"}}],[11,"lead_dim","","",4,{"inputs":[{"name":"blasarrayview"}],"output":{"name":"c_int"}}],[11,"as_ptr","","",4,null],[11,"as_mut_ptr","","",4,null],[11,"rows","","",5,{"inputs":[{"name":"blasarrayviewmut"}],"output":{"name":"c_int"}}],[11,"cols","","",5,{"inputs":[{"name":"blasarrayviewmut"}],"output":{"name":"c_int"}}],[11,"lead_dim","","",5,{"inputs":[{"name":"blasarrayviewmut"}],"output":{"name":"c_int"}}],[11,"as_ptr","","",5,null],[11,"as_mut_ptr","","",5,null],[11,"slice","alloc::rc","",6,null],[11,"slice_mut","","",6,null],[11,"ensure_unique","","",6,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",6,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"clone_with_ptr","","",6,null],[11,"slice","collections::vec","",7,null],[11,"slice_mut","","",7,null],[11,"clone_with_ptr","","",7,null],[11,"slice","ndarray","",8,null],[11,"clone_with_ptr","","",8,null],[11,"slice","","",8,null],[11,"slice_mut","","",8,null],[11,"new","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"rc"}}],[11,"new","alloc::rc","",6,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",6,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"ndim","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"slice","","",7,null],[11,"slice_mut","","",7,null],[11,"remove_axis","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"fmt","ndarray","",9,{"inputs":[{"name":"axis"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"axis"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"axis"}],"output":{"name":"axis"}}],[11,"axis","","",9,{"inputs":[{"name":"axis"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"indexes"}],"output":{"name":"indexes"}}],[11,"new","","Create an iterator over the array shape `dim`.",10,{"inputs":[{"name":"d"}],"output":{"name":"indexes"}}],[11,"next","","",10,{"inputs":[{"name":"indexes"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"elements"}],"output":{"name":"elements"}}],[11,"next","","",11,{"inputs":[{"name":"elements"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"elements"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"indexed"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next","","",13,{"inputs":[{"name":"elementsmut"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"elementsmut"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"indexedmut"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next","","",15,{"inputs":[{"name":"inneriter"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next","","",16,{"inputs":[{"name":"inneritermut"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",17,null],[11,"clone","","",17,{"inputs":[{"name":"outeriter"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"outeriter"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"outeriter"}],"output":{"name":"option"}}],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",18,null],[11,"next","","",18,{"inputs":[{"name":"outeritermut"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"next_back","","",18,{"inputs":[{"name":"outeritermut"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"axischunksiter"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next_back","","",19,{"inputs":[{"name":"axischunksiter"}],"output":{"name":"option"}}],[11,"next","","",20,{"inputs":[{"name":"axischunksitermut"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"next_back","","",20,{"inputs":[{"name":"axischunksitermut"}],"output":{"name":"option"}}],[11,"fmt","","",21,{"inputs":[{"name":"si"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"eq","","",21,{"inputs":[{"name":"si"},{"name":"si"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"si"},{"name":"si"}],"output":{"name":"bool"}}],[11,"from","","",21,{"inputs":[{"name":"range"}],"output":{"name":"si"}}],[11,"from","","",21,{"inputs":[{"name":"rangefrom"}],"output":{"name":"si"}}],[11,"from","","",21,{"inputs":[{"name":"rangeto"}],"output":{"name":"si"}}],[11,"from","","",21,{"inputs":[{"name":"rangefull"}],"output":{"name":"si"}}],[11,"step","","",21,{"inputs":[{"name":"si"},{"name":"ixs"}],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"si"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"shapeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"shapeerror"}],"output":{"name":"shapeerror"}}],[11,"description","","",0,{"inputs":[{"name":"shapeerror"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"shapeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"strideerror"},{"name":"strideerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"strideerror"},{"name":"strideerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"strideerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"strideerror"}],"output":{"name":"strideerror"}}],[11,"description","","",1,{"inputs":[{"name":"strideerror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"strideerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"from_vec","","Create a one-dimensional array from a vector (no allocation needed).",2,{"inputs":[{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",2,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"linspace","","Create a one-dimensional array from inclusive interval\n`[start, end]` with `n` elements. `F` must be a floating point type.",2,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"arraybase"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",2,{"inputs":[{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"from_elem","","Create an array with copies of `elem`, dimension `dim`.",2,{"inputs":[{"name":"d"},{"name":"a"}],"output":{"name":"arraybase"}}],[11,"from_elem_f","","Create an array with copies of `elem`, dimension `dim` and fortran\nmemory order.",2,{"inputs":[{"name":"d"},{"name":"a"}],"output":{"name":"arraybase"}}],[11,"zeros","","Create an array with zeros, dimension `dim`.",2,{"inputs":[{"name":"d"}],"output":{"name":"arraybase"}}],[11,"zeros_f","","Create an array with zeros, dimension `dim` and fortran memory order.",2,{"inputs":[{"name":"d"}],"output":{"name":"arraybase"}}],[11,"default","","Create an array with default values, dimension `dim`.",2,{"inputs":[{"name":"d"}],"output":{"name":"arraybase"}}],[11,"from_vec_dim","","Create an array from a vector (with no allocation needed).",2,{"inputs":[{"name":"d"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_vec_dim_unchecked","","Create an array from a vector (with no allocation needed).",2,{"inputs":[{"name":"d"},{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"from_vec_dim_unchecked_f","","Create an array from a vector (with no allocation needed),\nusing fortran memory order to interpret the data.",2,{"inputs":[{"name":"d"},{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"from_vec_dim_stride","","Create an array from a vector and interpret it according to the\nprovided dimensions and strides. No allocation needed.",2,{"inputs":[{"name":"d"},{"name":"d"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_vec_dim_stride_unchecked","","Create an array from a vector and interpret it according to the\nprovided dimensions and strides. No allocation needed.",2,{"inputs":[{"name":"d"},{"name":"d"},{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"len","","Return the total number of elements in the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"usize"}}],[11,"dim","","Return the shape of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"d"}}],[11,"shape","","Return the shape of the array as a slice.",2,null],[11,"strides","","Return the strides of the array",2,null],[11,"ndim","","Return the number of dimensions (axes) in the array",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"usize"}}],[11,"view","","Return a read-only view of the array",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayview"}}],[11,"view_mut","","Return a read-write view of the array",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayviewmut"}}],[11,"to_owned","","Return an uniquely owned copy of the array",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"to_shared","","Return a shared ownership (copy on write) array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"rcarray"}}],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array,\nwithout any copying.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"rcarray"}}],[11,"iter","","Return an iterator of references to the elements of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"elements"}}],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"elementsmut"}}],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"indexed"}}],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"indexedmut"}}],[11,"slice","","Return a sliced array.",2,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":{"name":"arrayview"}}],[11,"slice_mut","","Return a sliced read-write view of the array.",2,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":{"name":"arrayviewmut"}}],[11,"islice","","Slice the array’s view in place.",2,{"inputs":[{"name":"arraybase"},{"name":"slicearg"}],"output":null}],[11,"get","","Return a reference to the element at `index`, or return `None`\nif the index is out of bounds.",2,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None`\nif the index is out of bounds.",2,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"option"}}],[11,"uget","","Perform *unchecked* array indexing.",2,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"a"}}],[11,"uget_mut","","Perform *unchecked* array indexing.",2,{"inputs":[{"name":"arraybase"},{"name":"d"}],"output":{"name":"a"}}],[11,"subview","","Along `axis`, select the subview `index` and return a\nview with that axis removed.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view\nwith the axis removed.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"isubview","","Collapse dimension `axis` into length one,\nand select the subview of `index` along that axis.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"},{"name":"ix"}],"output":null}],[11,"into_subview","","Along `axis`, select the subview `index` and return `self`\nwith that axis removed.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"},{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"inner_iter","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"inneriter"}}],[11,"inner_iter_mut","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"inneritermut"}}],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"outeriter"}}],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"outeritermut"}}],[11,"axis_iter","","Return an iterator that traverses over `axis`\nand yields each subview along it.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"}],"output":{"name":"outeriter"}}],[11,"axis_iter_mut","","Return an iterator that traverses over `axis`\nand yields each mutable subview along it.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"}],"output":{"name":"outeritermut"}}],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`,\nyielding non-overlapping views along that axis.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksiter"}}],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`,\nyielding non-overlapping read-write views along that axis.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"},{"name":"usize"}],"output":{"name":"axischunksitermut"}}],[11,"diag","","Return an view of the diagonal elements of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayview"}}],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arrayviewmut"}}],[11,"into_diag","","Return the diagonal as a one-dimensional array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in\nmemory (where the last index is the most rapidly varying).",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"bool"}}],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and\nthe element order corresponds to the memory order. Return `None` otherwise.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"option"}}],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and\nthe element order corresponds to the memory order. Return `None` otherwise.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"option"}}],[11,"reshape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted.",2,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"arraybase"}}],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted, but the source array or view must be\ncontiguous, otherwise we cannot rearrange the dimension.",2,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"result"}}],[11,"broadcast","","Act like a larger size and/or shape array by *broadcasting*\ninto a larger shape, if possible.",2,{"inputs":[{"name":"arraybase"},{"name":"e"}],"output":{"name":"option"}}],[11,"swap_axes","","Swap axes `ax` and `bx`.",2,{"inputs":[{"name":"arraybase"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"reversed_axes","","Transpose the array by reversing axes.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"raw_data","","Return a slice of the array’s backing data in memory order.",2,null],[11,"raw_data_mut","","Return a mutable slice of the array’s backing data in memory order.",2,null],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"assign_scalar","","Perform an elementwise assigment to `self` from scalar `x`.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step,\ncalling the closure `f` on each element pair.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"},{"name":"f"}],"output":null}],[11,"fold","","Traverse the array elements in order and apply a fold,\nreturning the resulting value.",2,{"inputs":[{"name":"arraybase"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"map","","Apply `f` elementwise and return a new array with\nthe results.",2,{"inputs":[{"name":"arraybase"},{"name":"f"}],"output":{"name":"ownedarray"}}],[11,"sum","","Return sum along `axis`.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"}],"output":{"name":"ownedarray"}}],[11,"scalar_sum","","Return the sum of all elements in the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"a"}}],[11,"mean","","Return mean along `axis`.",2,{"inputs":[{"name":"arraybase"},{"name":"axis"}],"output":{"name":"ownedarray"}}],[11,"allclose","","Return `true` if the arrays&#39; elementwise differences are all within\nthe given absolute tolerance.&lt;br&gt;\nReturn `false` otherwise, or if the shapes disagree.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"},{"name":"a"}],"output":{"name":"bool"}}],[11,"dot","","Compute the dot product of one-dimensional arrays.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"a"}}],[11,"row","","Return an array view of row `index`.",2,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"row_mut","","Return a mutable array view of row `index`.",2,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"column","","Return an array view of column `index`.",2,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayview"}}],[11,"column_mut","","Return a mutable array view of column `index`.",2,{"inputs":[{"name":"arraybase"},{"name":"ix"}],"output":{"name":"arrayviewmut"}}],[11,"mat_mul","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"mat_mul_col","","Perform the matrix multiplication of the rectangular array `self` and\ncolumn vector `rhs`.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"iadd","","Perform elementwise\naddition\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"iadd_scalar","","Perform elementwise\naddition\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"isub","","Perform elementwise\nsubtraction\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"isub_scalar","","Perform elementwise\nsubtraction\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"imul","","Perform elementwise\nmultiplication\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"imul_scalar","","Perform elementwise\nmultiplication\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"idiv","","Perform elementwise\ndivision\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"idiv_scalar","","Perform elementwise\ndivision\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"irem","","Perform elementwise\nremainder\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"irem_scalar","","Perform elementwise\nremainder\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ibitand","","Perform elementwise\nbit and\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ibitand_scalar","","Perform elementwise\nbit and\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ibitor","","Perform elementwise\nbit or\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ibitor_scalar","","Perform elementwise\nbit or\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ibitxor","","Perform elementwise\nbit xor\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ibitxor_scalar","","Perform elementwise\nbit xor\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ishl","","Perform elementwise\nleft shift\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ishl_scalar","","Perform elementwise\nleft shift\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ishr","","Perform elementwise\nright shift\n between `self` and `rhs`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"ishr_scalar","","Perform elementwise\nright shift\n between `self` and the scalar `x`,\n *in place*.",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"ineg","","Perform an elementwise negation of `self`, *in place*.",2,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"inot","","Perform an elementwise unary not of `self`, *in place*.",2,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"sub","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"mul","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"div","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"rem","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"rem","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitand","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitand","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitor","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitor","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"bitxor","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shl","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shl","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"shr","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"shr","","",2,{"inputs":[{"name":"arraybase"},{"name":"b"}],"output":{"name":"arraybase"}}],[11,"add","num::complex","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"sub","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"mul","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"div","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"add","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"add","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"sub","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"sub","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"mul","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"mul","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"div","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"arraybase"}}],[11,"div","","",22,{"inputs":[{"name":"complex"},{"name":"arraybase"}],"output":{"name":"ownedarray"}}],[11,"neg","ndarray","Perform an elementwise negation of `self` and return the result.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"not","","Perform an elementwise unary not of `self` and return the result.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"add_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"add_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"sub_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"mul_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"div_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"rem_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"bitand_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"bitand_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"bitor_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"bitor_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"bitxor_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"shl_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":null}],[11,"shr_assign","","",2,{"inputs":[{"name":"arraybase"},{"name":"a"}],"output":null}],[11,"from_slice","","Create a one-dimensional read-only array view of the data in `xs`.",2,null],[11,"from_slice_dim_stride","","Create a read-only array view borrowing its data from a slice.",2,null],[11,"split_at","","Split the array along `axis` and return one view strictly before the\nsplit and one view after the split.",2,null],[11,"from_slice","","Create a one-dimensional read-write array view of the data in `xs`.",2,null],[11,"from_slice_dim_stride","","Create a read-write array view borrowing its data from a slice.",2,null],[11,"split_at","","Split the array along `axis` and return one mutable view strictly\nbefore the split and one mutable view after the split.",2,null],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"RcArray","","Array where the data is reference counted and copy on write, it\ncan act as both an owner as the data as well as a lightweight view.",null,null],[6,"Array","","***Deprecated: Use `RcArray` instead***",null,null],[6,"OwnedArray","","Array where the data is owned uniquely.",null,null],[6,"ArrayView","","A lightweight array view.",null,null],[6,"ArrayViewMut","","A lightweight read-write array view.",null,null],[17,"S","","Slice value for the full range of an axis.",null,null],[8,"Dimension","","Trait for the shape and index types of arrays.",null,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this\ndimension.",23,null],[8,"RemoveAxis","","Helper trait to define a larger-than relation for array shapes:\nremoving one axis from *Self* gives smaller dimension *Smaller*.",null,null],[16,"Smaller","","",24,null],[10,"remove_axis","","",24,{"inputs":[{"name":"removeaxis"},{"name":"usize"}],"output":{"name":"smaller"}}],[8,"NdIndex","","A tuple or fixed size array that can be used to index an array.",null,null],[16,"Dim","","",25,null],[8,"LinalgScalar","","Trait union for scalars (array elements) that support linear algebra operations.",null,null],[8,"Data","","Array’s inner representation.",null,null],[16,"Elem","","",26,null],[10,"slice","","",26,null],[8,"DataMut","","Array’s writable inner representation.",null,null],[10,"slice_mut","","",27,null],[11,"ensure_unique","","",27,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",27,{"inputs":[{"name":"datamut"}],"output":{"name":"bool"}}],[8,"DataOwned","","Array representation that is a unique or shared owner of its data.",null,null],[10,"new","","",28,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_shared","","",28,{"inputs":[{"name":"dataowned"}],"output":{"name":"rc"}}],[8,"DataShared","","Array representation that is a lightweight view.",null,null],[8,"DataClone","","Clone an Array’s storage.",null,null],[10,"clone_with_ptr","","Unsafe because, `ptr` must point inside the current storage.",29,null],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[16,"Elem","","",30,null],[10,"as_init_slice","","",30,null],[10,"len","","",30,{"inputs":[],"output":{"name":"usize"}}],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"clone","","",8,{"inputs":[{"name":"viewrepr"}],"output":{"name":"viewrepr"}}],[11,"clone","","",12,{"inputs":[{"name":"indexed"}],"output":{"name":"indexed"}}],[14,"s!","","Slice argument constructor.",null,null],[11,"into_iter","","",31,{"inputs":[{"name":"arrayview"}],"output":{"name":"intoiter"}}],[11,"into_iter","","",32,{"inputs":[{"name":"arrayviewmut"}],"output":{"name":"intoiter"}}],[11,"ensure_unique","","",27,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",27,{"inputs":[{"name":"datamut"}],"output":{"name":"bool"}}],[11,"ndim","","",33,{"inputs":[{"name":"ix"}],"output":{"name":"usize"}}],[11,"size","","",33,{"inputs":[{"name":"ix"}],"output":{"name":"usize"}}],[11,"size_checked","","",33,{"inputs":[{"name":"ix"}],"output":{"name":"option"}}],[11,"default_strides","","",33,{"inputs":[{"name":"ix"}],"output":{"name":"self"}}],[11,"first_index","","",33,{"inputs":[{"name":"ix"}],"output":{"name":"option"}}],[11,"next_for","","",33,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"option"}}],[11,"stride_offset","","Self is an index, return the stride offset",33,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",33,{"inputs":[{"name":"ix"},{"name":"ix"},{"name":"ix"}],"output":{"name":"option"}}],[11,"remove_axis","","",33,null],[11,"ensure_unique","","",27,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",27,{"inputs":[{"name":"datamut"}],"output":{"name":"bool"}}]],"paths":[[4,"ShapeError"],[4,"StrideError"],[3,"ArrayBase"],[8,"AsBlas"],[3,"BlasArrayView"],[3,"BlasArrayViewMut"],[3,"Rc"],[3,"Vec"],[3,"ViewRepr"],[3,"Axis"],[3,"Indexes"],[3,"Elements"],[3,"Indexed"],[3,"ElementsMut"],[3,"IndexedMut"],[3,"InnerIter"],[3,"InnerIterMut"],[3,"OuterIter"],[3,"OuterIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"Si"],[3,"Complex"],[8,"Dimension"],[8,"RemoveAxis"],[8,"NdIndex"],[8,"Data"],[8,"DataMut"],[8,"DataOwned"],[8,"DataClone"],[8,"FixedInitializer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"]]};
initSearch(searchIndex);
